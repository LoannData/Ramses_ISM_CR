subroutine dustXflx(uin,myflux,dx,dy,dz,dt,ngrid,ffdx,ncycle,dust_cycle)
  use amr_parameters
  use const             
  use hydro_parameters
  implicit none 

  integer ::ngrid
  real(dp)::dx,dt

  ! Output fluxes
  real(dp),dimension(1:nvector,if1:if2,jf1:jf2,kf1:kf2,1:ndust)::myflux

  ! Primitive variables
  real(dp),dimension(1:nvector,iu1:iu2,ju1:ju2,ku1:ku2,1:2*ndust+2)::uin
  real(dp),dimension(1:nvector,iu1:iu2,ju1:ju2,ku1:ku2)::ffdx
  real(dp)::dx_loc,sum_dust,Tksleft_tot,Tksright_tot
  real(dp),dimension(1:ndust)::fdust, Tksleft, Tksright
  real(dp),dimension(1:ndust)::fx
  real(dp) :: speed, sigma,dPdx,scale_l,scale_t,scale_d,scale_v,scale_nH,scale_T2
  integer::i,j,k,l,isl,idust, idens, ipress
  integer::jlo,jhi,klo,khi
  call units(scale_l,scale_t,scale_d,scale_v,scale_nH,scale_T2)

  jlo=MIN(1,ju1+2); jhi=MAX(1,ju2-2)
  klo=MIN(1,ku1+2); khi=MAX(1,ku2-2)
  idens=2*ndust+1
  ipress=2*ndust+2
  do k=klo,khi
  do j=jlo,jhi
  do i=if1,if2
     do l = 1, ngrid
        dx_loc=max(ffdx(l,i-1,j,k),ffdx(l,i,j,k))
        Tksleft     = 0.0_dp
        Tksright    = 0.0_dp
        Tksleft_tot = 0.0_dp
        Tksright_tot= 0.0_dp
        dPdx= (uin(l,i,j,k,ipress)-uin(l,i-1,j,k,ipress))/dx
        do idust= 1, ndust
           Tksleft_tot=Tksleft_tot-uin(l,i-1,j,k,idust)*uin(l,i-1,j,k,ndust+idust)/uin(l,i-1,j,k,idens)
           Tksright_tot=Tksright_tot-uin(l,i,j,k,idust)*uin(l,i,j,k,ndust+idust)/uin(l,i,j,k,idens)
        end do
        do idust= 1, ndust
           Tksleft(idust)=  uin(l,i-1,j,k,ndust+idust)+Tksleft_tot
           Tksright(idust)= uin(l,i,j,k,ndust+idust)+Tksright_tot
        end do
        do idust=1,ndust
           !First order terms
           speed  = 0.5d0*(Tksright(idust)/uin(l,i,j,k,idens)+Tksleft(idust)/uin(l,i-1,j,k,idens))*dPdx
           if (dt.gt. courant_factor * dx/abs(speed)) then
              write (*,*) 'DUST DIFFUSION UNSTABLE WHAT HAVE YOU DONE?', dt,  courant_factor*dx/abs(speed), uin(l,i,j,k,idens)
              if(uin(l,i,j,k,idens).lt.1.0d-17/scale_d) then
                 speed = courant_factor*dx/dt
              else
                 stop
              endif 
           end if    
           if(speed.ge.0.0d0) fx(idust)= speed*uin(l,i-1,j,k,idust) 
           if(speed<0.0d0) fx(idust)= speed*uin(l,i,j,k,idust)
           !Second order terms
           if(speed.ge.0.0d0) isl = i-1
           if(speed<0.0d0) isl = i       
           call minmod_dust((uin(l,isl,j,k,idust)-uin(l,isl-1,j,k,idust))/dx,(uin(l,isl+1,j,k,idust)-uin(l,isl,j,k,idust))/dx,sigma)
           fx(idust) = fx(idust) + 0.5d0*abs(speed)*(dx-abs(speed)*dt)*sigma
        end do
        do idust= 1, ndust
           myflux(l,i,j,k,idust)=fx(idust)*dt/dx/dx_loc
        end do
    enddo
  enddo
  enddo
  enddo
  
end subroutine dustXflx
